params {

	sub_qc = true
	metadata = true
	outdir = "results"
	scratch = true
	fastq_screen_config = false
	logo = "${baseDir}/assets/ikmblogo.png"
	skip_multiqc = false
	chunk_size = 384
	bloomfilter = null

	max_memory = 128.GB
	max_cpus = 16
	max_time = 240.h
	maxMultiqcEmailFileSize = 25.MB
}

manifest {
	version = "1.7.5"
	description = "NGS QC Pipeline"
	author = "Marc P. Hoeppner"
	homePage = "https://github.com/ikmb/ngs-qc"
	nextflowVersion = "20.10.0"
}

process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
        enabled = true
        file = "${params.outdir}/pipeline_info/qc-pipeline_timeline.html"
}
report {
        enabled = true
        file = "${params.outdir}/pipeline_info/qc-pipeline_report.html"
}
trace {
        enabled = true
        file = "${params.outdir}/pipeline_info/qc-pipeline_trace.txt"
}
dag {
        enabled = true
        file = "${params.outdir}/pipeline_info/qc-pipeline_dag.svg"
}

process.container = 'ikmb/ngs-qc:1.7'

profiles {
	standard {
                includeConfig 'conf/base.config'
                includeConfig 'conf/diagnostic.config'
                includeConfig 'conf/resources.config'
	}
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
